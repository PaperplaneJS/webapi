generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("POSTGRESQL_URL")
}

// ##################### 每日下班提醒 #####################

// 工作日流水记录
model WorkdayRecord {
  id        String  @id @default(cuid())
  date      String
  isWorkDay Boolean

  allCompanyRecords DailyCompanyRecord[]
  DailyCityRecord   DailyCityRecord[]

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?
}

// 公司
model Company {
  id         String  @id @default(cuid())
  company    String
  stockCode  String?
  salaryDate Int?

  allDailyRecords  DailyCompanyRecord[]
  allCities        City[]
  allMessageRobots MessageRobot[]

  OffworkNoticeSetting OffworkNoticeSetting[]

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?
}

// 每日公司状况记录
model DailyCompanyRecord {
  id             String  @id @default(cuid())
  salaryDate     String?
  restDays       Int?
  todayStock     Float?
  yesterdayStock Float?
  delta          Float?

  beloneToWorkday WorkdayRecord @relation(fields: [workdayRecordId], references: [id], onDelete: Cascade)
  workdayRecordId String
  belongToCompany Company       @relation(fields: [companyId], references: [id], onDelete: Cascade)
  companyId       String

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?
}

// 城市
model City {
  id           String  @id @default(cuid())
  city         String
  weatherCode  String?
  oilpriceCode String?
  mapLatitude  String?
  mapLongitude String?

  belongToCompany Company @relation(fields: [companyId], references: [id])
  companyId       String

  allDailyRecords DailyCityRecord[]

  createdAt            DateTime               @default(now())
  updatedAt            DateTime               @updatedAt
  deletedAt            DateTime?
  OffworkNoticeSetting OffworkNoticeSetting[]
}

// 每日城市状况记录
model DailyCityRecord {
  id                  String  @id @default(cuid())
  todayWeather        String?
  todayTemperature    String?
  todayWid            String?
  tomorrowWeather     String?
  tomorrowTemperature String?
  tomorrowWid         String?

  h92     Float?
  h95     Float?
  h98     Float?
  traffic String?

  belongToWorkday WorkdayRecord @relation(fields: [workdayRecordId], references: [id], onDelete: Cascade)
  workdayRecordId String
  belongToCity    City          @relation(fields: [cityId], references: [id], onDelete: Cascade)
  cityId          String

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?
}

// 消息机器人类型
enum MessageRobotType {
  DINGTALK
  WXBIZ
  FEISHU
}

// 消息机器人
model MessageRobot {
  id                  String           @id @default(cuid())
  name                String
  type                MessageRobotType
  accessToken         String?
  secret              String?
  extraAuthentication Json?
  desc                String?

  belongToCompany Company @relation(fields: [companyId], references: [id])
  companyId       String

  OffworkNoticeSetting OffworkNoticeSetting[]

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?
}

// Offwork 提醒登记表
model OffworkNoticeSetting {
  id       String  @id @default(cuid())
  disabled Boolean @default(false)

  belongToRobot   MessageRobot @relation(fields: [messageRobotId], references: [id])
  messageRobotId  String
  belongToCompany Company      @relation(fields: [companyId], references: [id])
  companyId       String
  belongToCity    City         @relation(fields: [cityId], references: [id])
  cityId          String

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?
}

// ##################### Git 智能周报 #####################

// Git 仓库状态
enum GitCommonStatus {
  INIT
  READY
  PENDING
  ERROR
}

// Git 项目
model GitProject {
  id String @id @default(cuid())

  name         String          @unique
  weeklyStatus GitCommonStatus @default(INIT)
  publicKey    String?
  privateKey   String?

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?

  repos     GitRepo[]
  staffs    GitStaff[]
  GitReport GitReport[]
}

// Git 仓库
model GitRepo {
  id String @id @default(cuid())

  name           String          @unique
  url            String          @unique
  status         GitCommonStatus @default(INIT)
  lastSync       DateTime?
  recentBranches String[]        @default([])
  recentCommits  GitCommit[]

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?

  GitProject   GitProject? @relation(fields: [gitProjectId], references: [id])
  gitProjectId String?
}

// Git 用户
model GitStaff {
  id String @id @default(cuid())

  name             String   @unique
  emails           String[] @default([])
  alternativeNames String[] @default([])

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?

  GitProject   GitProject? @relation(fields: [gitProjectId], references: [id])
  gitProjectId String?
  GitReport    GitReport[]
}

// Git 提交记录
model GitCommit {
  id String @id @default(cuid())

  hash        String
  dateString  String
  message     String
  authorName  String
  authorEmail String
  refs        String?

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?

  GitRepo   GitRepo? @relation(fields: [gitRepoId], references: [id])
  gitRepoId String?
}

// Git 报告
model GitReport {
  id String @id @default(cuid())

  content String?

  gitProjectId    String
  gitStaffId      String
  beloneToProject GitProject @relation(fields: [gitProjectId], references: [id])
  beloneToStaff   GitStaff   @relation(fields: [gitStaffId], references: [id])

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?
}
